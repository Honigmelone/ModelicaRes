#!/usr/bin/python
"""Load results from Modelica_ simulation(s) and/or linearization(s) and provide
a Python_ session to analyze the results.

This script can be executed from the command line.  It accepts as arguments the
names of result files or directories with result files.  Wildcards can be used.
If no arguments are given, then the script provides a dialog to  choose a file
or folder.  After loading files, it provides working session of `IPython
<http://www.ipython.org/>`_ with the results preloaded.  PyLab_ is imported
(``from pylab import *``) to provide many functions of NumPy_ and matplotlib_
(e.g., :meth:`sin` and :meth:`plot`).  The essential classes and functions of
ModelicaRes_ are imported as well (``from modelicares import *``).

**Setup and example:**

Copy the *examples* directory of the ModelicaRes_ distribution to a convenient
location.  Open a command prompt at that location and execute the following
command:

.. code-block:: sh

TODO update:
   $ loadres ChuaCircuit PID
   Valid: SimRes('.../examples/ChuaCircuit.mat')
   Valid: LinRes('.../examples/PID.mat')
   A simulation result has been loaded into sim.
   A linearization result has been loaded into lin.

If this does not work, then the *loadres* script probably has not been installed
to a location recognized by the operating system.  Instead, copy it to the
*examples* directory and try again.  If necessary, call Python_ explicitly
(``python loadres ChuaCircuit PID``).

Please also see the tutorial, which is available as an `IPython notebook
<https://github.com/kdavies4/ModelicaRes/blob/master/examples/tutorial.ipynb>`_
or online as a `static page
<http://nbviewer.ipython.org/github/kdavies4/ModelicaRes/blob/master/examples/tutorial.ipynb>`_.
Using the Python_ session started from the example above, you can follow the
tutorial beginning with the "Analyzing the simulation results" section.


.. _ModelicaRes: http://kdavies4.github.io/ModelicaRes
.. _Modelica: http://www.modelica.org/
.. _Python: http://www.python.org/
.. _PyLab: http://www.scipy.org/PyLab
.. _NumPy: http://numpy.scipy.org/
.. _matplotlib: http://www.matplotlib.org/
"""
__author__ = "Kevin Davies"
__email__ = "kdavies4@gmail.com"
__copyright__ = "Copyright 2012-2013, Georgia Tech Research Corporation"
__license__ = "BSD-compatible (see LICENSE.txt)"


import os
import time

from sys import argv
from PyQt4.QtGui import QApplication, QFileDialog, QMessageBox, QPushButton

from modelicares.multi import multiload


default_path = os.path.expanduser("~/Documents/Modelica")

def file_or_folder():
    """Choose to load from a file or folder.
    """
    # TODO: Make the buttons appear in order: File, Folder, and Cancel.
    msgBox = QMessageBox()
    msgBox.setText("Do you want to open one file\nor all files from a folder?")
    msgBox.addButton(Folder, QMessageBox.AcceptRole)
    msgBox.addButton(File, QMessageBox.AcceptRole)
    msgBox.addButton(QMessageBox.Cancel)
    msgBox.setDefaultButton(File)
    msgBox.exec_()
    return msgBox.clickedButton()

def delayed_exit(t=0.5):
    """Exit with a message and a delay.
    """
    print("Exiting...")
    time.sleep(t)
    exit()

if __name__ == '__main__':
    """Load Modelica_ results and provide a Python_ session to analyze them.
    """
    # Determine the file location(s).
    if len(argv) == 1:
        app = QApplication([])
        File = QPushButton("File")
        Folder = QPushButton("Folder")
        choice = file_or_folder()
        if choice == File:
            getFile = QFileDialog().getOpenFileName
            loc = str(getFile(None, "Choose a Modelica results file",
                              default_path, "*.mat"))
        elif choice == Folder:
            getDir = QFileDialog().getExistingDirectory
            loc = str(getDir(None, "Choose a folder with Modelica results",
                             default_path))
        else:
            app.exit()
            delayed_exit()
        app.exit()
        if not loc:
            delayed_exit()
    #elif argv[1] == '--test':
    #    import shelldoctest
    #    shelldoctest.testmod()
    #    exit()
    else:
        loc = argv[1:]

    # Load the file(s).
    sims, lins = multiload(loc)

    # Handle the simulation list.
    n_sims = len(sims)
    if n_sims == 1:
        sim = sims[0]
        del sims
        print("A simulation result has been loaded into sim.")
    elif n_sims > 1:
        print("Simulation results have been loaded into sims[0] through "
              "sims[%i]." % (n_sims-1))#, end="")

    # Handle the linearization list.
    n_lins = len(lins)
    if n_lins == 1:
        lin = lins[0]
        del lins
        print("A linearization result has been loaded into lin.")
    elif n_lins > 1:
        print("Linearization results have been loaded into lins[0] through "
              "lins[%i]." % (n_lins-1))#, end="")
    elif n_sims == 0:
        print("No files were loaded.")
        delayed_exit()

    # Delete some variables to reduce clutter in the Python session below.
    del File, Folder, loc, default_path, n_sims, n_lins

    # Open the IPython or standard Python interpreter.
    #    http://writeonly.wordpress.com/2008/09/08/embedding-a-python-shell-in-a-python-script/,
    #    accessed 11/2/2010
    from pylab import *
    from modelicares import *
    try:
        # IPython
        from IPython import embed
        embed()
    except ImportError:
        try:
            # IPython via old API style
            from IPython.Shell import IPShellEmbed
            IPShellEmbed(argv=['-noconfirm_exit'])()
            # Note: The -pylab option can't be embedded (see
            # http://article.gmane.org/gmane.comp.python.ipython.user/1190/match=pylab).
        except ImportError:
            # Standard Python
            from code import InteractiveConsole
            InteractiveConsole(globals()).interact()
